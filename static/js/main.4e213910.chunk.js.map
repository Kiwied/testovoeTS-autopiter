{"version":3,"sources":["components/Header/Header.js","components/NavBar/NavBar.tsx","components/Suggestion/Suggestion.tsx","components/SearchField/SearchField.tsx","images/plus_sign.svg","images/ok-sign.svg","components/SearchResult/SearchResult.tsx","pages/NewOrgPage.tsx","images/arrow-up.svg","images/arrow-down.svg","components/SavedResult/SavedResult.tsx","pages/SavedOrgsPage.tsx","App.tsx","index.js"],"names":["Header","className","href","target","rel","NavBar","setResult","setSuggestions","savedResults","location","useLocation","exact","to","activeClassName","onClick","pathname","length","Suggestion","data","setIsInputFocused","value","inn","address","region_with_type","SearchField","fetchSuggestions","suggestions","isInputFocused","suggestionIndex","setSuggestionIndex","keywordRef","React","useRef","handleInput","debounce","current","placeholder","type","ref","onChange","maxLength","autoComplete","id","onKeyDown","evt","key","preventDefault","newSuggestionIndex","document","getElementsByClassName","classList","toggle","slice","map","suggestion","i","SearchResult","result","setSavedResults","useState","isResultSaved","setIsResultSaved","useEffect","org","unrestricted_value","management","post","charAt","toLowerCase","opf","full","name","src","okIcon","alt","localStorage","removeItem","setItem","JSON","stringify","kpp","ogrn","NewOrgPage","htmlFor","obj","hasOwnProperty","isEmpty","plusSign","SavedResult","areDetailsOpen","setAreDetailsOpen","handleOpenDetails","newSavedResults","filter","arrowUp","arrowDown","SavedOrgsPage","withRouter","evtLstn","contains","parentElement","getElementById","addEventListener","removeEventListener","getItem","parse","path","query","options","method","mode","headers","body","fetch","then","res","ok","json","Promise","reject","status","statusText","newSuggestions","newSuggestion","push","catch","error","console","log","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4e213910.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Header.css';\n\nexport default function Header() {\n  return (\n    <header className=\"header\">\n      <a href=\"https://autopiter.ru/\"\n         className=\"header__logo\"\n         target=\"_blank\"\n         rel=\"noreferrer\"\n      />\n    </header>\n  )\n}\n","import React from 'react';\nimport { NavLink, useLocation } from \"react-router-dom\";\n\nimport './NavBar.css';\nimport { IOrg } from \"../../interfaces\";\n\ninterface NavBarProps {\n  setResult(newResult: {}): void\n  setSuggestions(newSuggestions: []): void\n  savedResults: IOrg[]\n}\n\nexport const NavBar: React.FC<NavBarProps> = ({ setResult, setSuggestions,\n                                                savedResults }) =>\n{\n  // переменная для определения текущего роута\n  const location = useLocation();\n\n  // \"отчистка\" страницы при переходе на нее обратно с '/saved'\n  const handleClearPage = () => {\n    if (location.pathname !== '/') {\n      setResult({});\n      setSuggestions([]);\n    }\n  }\n\n  return (\n    <nav className=\"navigation\">\n      <NavLink exact to=\"/\"\n               className=\"navigation__link\"\n               activeClassName=\"navigation__link navigation__link_active\"\n               onClick={handleClearPage}\n      >Новая организация</NavLink>\n\n      <NavLink to=\"/saved\"\n               className=\"navigation__link\"\n               activeClassName=\"navigation__link navigation__link_active\"\n      >Сохраненные организации ({savedResults.length})</NavLink>\n    </nav>\n  )\n}\n","import React from \"react\";\n\nimport './Suggestion.css';\nimport { IOrg } from \"../../interfaces\";\n\ninterface SuggestionProps {\n  data: IOrg\n  setResult(newResult: IOrg): void\n  setIsInputFocused(newIsInputFocused: boolean): void\n}\n\nexport const Suggestion: React.FC<SuggestionProps> =\n  ({ data, setResult, setIsInputFocused }) => {\n  const handleSelect = () => {\n    setResult(data);\n    setIsInputFocused(false);\n  }\n\n  return (\n    <div className=\"suggestion\" onClick={handleSelect}>\n      <h3 className=\"suggestion__name\">{data.value}</h3>\n      <p className=\"suggestion__info\">\n        {data.data.inn} {data.data.address.data.region_with_type}\n      </p>\n    </div>\n  )\n}\n","import React from \"react\";\nimport debounce from 'lodash.debounce';\n\nimport './SearchField.css';\nimport { Suggestion } from \"../Suggestion/Suggestion\";\nimport { IOrg } from \"../../interfaces\";\n\ninterface SearchFieldPorps {\n  fetchSuggestions(query: string): void\n  suggestions: IOrg[]\n  setResult(newResult: IOrg): void\n  setIsInputFocused(newIsInputFocused: boolean): void\n  isInputFocused: boolean\n  suggestionIndex: number\n  setSuggestionIndex(newSuggestionIndex: number): void\n}\n\nexport const SearchField: React.FC<SearchFieldPorps> =\n  ({ fetchSuggestions, suggestions, setResult, isInputFocused,\n     setIsInputFocused, suggestionIndex, setSuggestionIndex }) =>\n{\n  // реф введенного в инпут слова\n  const keywordRef = React.useRef<HTMLInputElement>(null);\n\n  // запрос к API подсказок с установленной задержкой\n  const handleInput = debounce(() => fetchSuggestions(keywordRef.current!.value), 200)\n\n  // стейт индекса текущей, выбранной подсказки в массиве всех Подсказок\n\n\n  // хэндлер выбора подсказок при помощи клавиатуры\n  const handleKeyboard = (evt: React.KeyboardEvent) => {\n    setIsInputFocused(true);\n    if (evt.key === 'ArrowDown') {\n      evt.preventDefault();\n      if (suggestions.length > 0\n          && isInputFocused\n          && suggestionIndex < 4)\n      {\n        const newSuggestionIndex = suggestionIndex + 1;\n        if (newSuggestionIndex > 0) {\n          document.getElementsByClassName('suggestion')[newSuggestionIndex - 1]\n            .classList.toggle('suggestion_hover');\n          document.getElementsByClassName('suggestion')[newSuggestionIndex]\n            .classList.toggle('suggestion_hover');\n          setSuggestionIndex(newSuggestionIndex);\n        } else {\n          document.getElementsByClassName('suggestion')[newSuggestionIndex]\n            .classList.toggle('suggestion_hover');\n          setSuggestionIndex(newSuggestionIndex);\n        }\n      }\n    }\n\n    if (evt.key === 'ArrowUp') {\n      evt.preventDefault();\n      if (suggestions.length > 0\n        && isInputFocused\n        && suggestionIndex > 0)\n      {\n        const newSuggestionIndex = suggestionIndex - 1;\n        if (newSuggestionIndex < 4) {\n          document.getElementsByClassName('suggestion')[newSuggestionIndex + 1]\n            .classList.toggle('suggestion_hover');\n          document.getElementsByClassName('suggestion')[newSuggestionIndex]\n            .classList.toggle('suggestion_hover');\n          setSuggestionIndex(newSuggestionIndex);\n        } else {\n          document.getElementsByClassName('suggestion')[newSuggestionIndex]\n            .classList.toggle('suggestion_hover');\n          setSuggestionIndex(newSuggestionIndex);\n        }\n      }\n    }\n\n    if (evt.key === 'Enter') {\n      evt.preventDefault();\n      if (suggestionIndex >= 0 && suggestionIndex <= 4) {\n        setResult(suggestions[suggestionIndex]);\n        setIsInputFocused(false);\n        setSuggestionIndex(-1);\n      }\n    }\n\n    if (evt.key === 'Escape') {\n      evt.preventDefault();\n      setIsInputFocused(false);\n      setSuggestionIndex(-1);\n      }\n  }\n\n  return (\n    <>\n      <input className=\"orgs__search\"\n             placeholder=\"Введите название, ИНН или адрес организации\"\n             type=\"text\"\n             ref={keywordRef}\n             onChange={handleInput}\n             maxLength={300}\n             autoComplete=\"off\"\n             id=\"input\"\n             onKeyDown={handleKeyboard}\n      />\n      {\n        suggestions.length > 0 && isInputFocused &&\n        <div className=\"orgs__suggestions\">\n          {suggestions.slice(0, 5).map((suggestion, i) => (\n            <Suggestion data={suggestion}\n                        key={i}\n                        setResult={setResult}\n                        setIsInputFocused={setIsInputFocused}\n            />\n          ))}\n        </div>\n      }\n    </>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/plus_sign.d5763053.svg\";","export default __webpack_public_path__ + \"static/media/ok-sign.e7e20d18.svg\";","import React from \"react\";\n\nimport './SearchResult.css';\nimport okIcon from '../../images/ok-sign.svg';\nimport { IOrg } from \"../../interfaces\";\n\ninterface SearchResultProps {\n  result: IOrg\n  setSavedResults(newSavedResults: IOrg[]): void\n  savedResults: IOrg[]\n}\n\nexport const SearchResult: React.FC<SearchResultProps> =\n  ({ result, setSavedResults, savedResults }) => {\n  const [isResultSaved, setIsResultSaved] = React.useState<boolean>(false);\n\n  // проверка сохранена ли уже эта организация\n  React.useEffect(() => {\n    setIsResultSaved(false);\n    savedResults.map((org) => org.data.inn === result.data.inn && setIsResultSaved(true));\n  }, [result])\n\n  function handleSaveResult() {\n    setSavedResults([result, ...savedResults]);\n    localStorage.removeItem('saved');\n    localStorage.setItem('saved', JSON.stringify([result, ...savedResults]));\n    setIsResultSaved(true);\n  }\n\n  return (\n    <div className=\"orgs__result\">\n      <h2 className=\"result__name\">{result.value}</h2>\n\n      <div className=\"result__container\">\n        <div className=\"result__data-container\">\n          <div className=\"result__data\">\n            <h3 className=\"result__data-title\">Юридический адрес</h3>\n            <p className=\"result__data-value\">{result.data.address.unrestricted_value}</p>\n          </div>\n\n          <div className=\"result__data\">\n            <h3 className=\"result__data-title\">\n              {\n                // проверка на ИП, т.к. у них в объекте нет 'management' свойства\n                result.data.type !== 'INDIVIDUAL'\n                  ? result.data.management.post!.charAt(0)\n                  + result.data.management.post!.slice(1).toLowerCase()\n                  : result.data.opf.full\n              }\n            </h3>\n            <p className=\"result__data-value\">\n              { result.data.type !== 'INDIVIDUAL'\n                ? result.data.management.name\n                : result.data.name.full\n              }\n            </p>\n          </div>\n\n          {\n            !isResultSaved\n              ? <button type=\"button\"\n                        className=\"result__save-btn\"\n                        onClick={handleSaveResult}>Сохранить</button>\n              : <button type=\"button\"\n                        className=\"result__save-btn result__save-btn_saved\">\n                  <img src={okIcon} alt=\"Сохранено\"/> Сохранено</button>\n          }\n        </div>\n\n        <div className=\"result__numbers\">\n          <p className=\"result__number\">\n            <span className=\"result__number result__number_span\">ИНН</span>\n            {result.data.inn}\n          </p>\n          {\n            // проверка на присутствие свойства kpp, т.к. не у всех\n            // организаций есть КПП\n            result.data.kpp &&\n            <p className=\"result__number\">\n              <span className=\"result__number result__number_span\">КПП</span>\n              {result.data.kpp}\n            </p>\n          }\n          <p className=\"result__number\">\n            <span className=\"result__number result__number_span\">ОГРН</span>\n            {result.data.ogrn}\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\n\nimport { SearchField } from \"../components/SearchField/SearchField\";\nimport plusSign from \"../images/plus_sign.svg\";\nimport { SearchResult } from \"../components/SearchResult/SearchResult\";\nimport './NewOrgPage.css';\nimport { IOrg } from \"../interfaces\";\n\ninterface NewOrgPageProps {\n  fetchSuggestions(query: string): void\n  suggestions: IOrg[]\n  setResult(newResult: IOrg): void\n  setIsInputFocused(newIsInputFocused: boolean): void\n  isInputFocused: boolean\n  result: IOrg | {}\n  setSavedResults(newSavedResults: IOrg[]): void\n  savedResults: IOrg[]\n  suggestionIndex: number\n  setSuggestionIndex(newSuggestionIndex: number): void\n}\n\nexport const NewOrgPage: React.FC<NewOrgPageProps> =\n  ({ fetchSuggestions, suggestions, setResult, setIsInputFocused,\n     isInputFocused, result, setSavedResults,\n     savedResults, setSuggestionIndex, suggestionIndex }) =>\n{\n  // вспомогательная функция для проверки объекта на \"пустоту\"\n  function isEmpty(obj: {}):boolean {\n    for(var key in obj) {\n      if(obj.hasOwnProperty(key))\n        return false;\n    }\n    return true;\n  }\n\n  return (\n    <div className=\"orgs\">\n      <label className=\"orgs__title\" htmlFor=\"input\">Организация или ИП</label>\n      <SearchField fetchSuggestions={fetchSuggestions}\n                   suggestions={suggestions}\n                   setResult={setResult}\n                   setIsInputFocused={setIsInputFocused}\n                   isInputFocused={isInputFocused}\n                   suggestionIndex={suggestionIndex}\n                   setSuggestionIndex={setSuggestionIndex}\n      />\n      {\n        // проверка для определения отрисовки результата\n        // или его отсутствия\n        isEmpty(result) ? (\n          <div className=\"orgs__no-results\">\n            <img src={plusSign}\n                 alt=\"Добавление новой организации\"\n                 className=\"orgs__add-org-icon\"/>\n            <p className=\"orgs__add-org-text\">\n              Для добавления новой организации введите ее\n              название, ИНН или адрес.\n            </p>\n          </div>\n        ) : (\n          <SearchResult result={result as IOrg}\n                        setSavedResults={setSavedResults}\n                        savedResults={savedResults}\n          />\n        )\n      }\n    </div>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/arrow-up.cd00e8cb.svg\";","export default __webpack_public_path__ + \"static/media/arrow-down.464346d5.svg\";","import React from \"react\";\n\nimport './SavedResult.css';\nimport arrowUp from '../../images/arrow-up.svg';\nimport arrowDown from '../../images/arrow-down.svg';\nimport { IOrg } from \"../../interfaces\";\n\ninterface SavedResultProps {\n  org: IOrg\n  setSavedResults(newSavedResults: IOrg[]): void\n  savedResults: IOrg[]\n}\n\nexport const SavedResult: React.FC<SavedResultProps> =\n  ({ org, setSavedResults, savedResults }) => {\n  const [areDetailsOpen, setAreDetailsOpen] = React.useState<boolean>(false);\n\n  // удаление организации из Сохраненных\n  function handleDeleteResult() {\n    const newSavedResults = savedResults.filter((data) => data.data.inn !== org.data.inn)\n    setSavedResults(newSavedResults);\n    localStorage.setItem('saved', JSON.stringify(newSavedResults));\n  }\n\n  function handleOpenDetails() {\n    setAreDetailsOpen(!areDetailsOpen);\n  }\n\n  return (\n    <div className=\"saved-result\">\n      <h3 className=\"saved-result__name\">{org.value}</h3>\n      <div className=\"saved-result__data-container\">\n        <p className=\"saved-result__data\">\n          <span className=\"saved-result__data_span\">ИНН</span>\n          {org.data.inn}\n        </p>\n        {\n          areDetailsOpen &&\n          (\n            <>\n              {\n                // проверка на присутствие свойства kpp, т.к. не у всех\n                // организаций есть КПП\n                org.data.kpp &&\n                <p className=\"saved-result__data\">\n                  <span className=\"saved-result__data_span\">КПП</span>\n                  {org.data.kpp}\n                </p>\n              }\n              <p className=\"saved-result__data\">\n                <span className=\"saved-result__data_span\">ОГРН</span>\n                {org.data.ogrn}\n              </p>\n              <p className=\"saved-result__data\">\n                <span className=\"saved-result__data_span\">Юридический адрес</span>\n                {org.data.address.unrestricted_value}\n              </p>\n              <p className=\"saved-result__data\">\n                <span className=\"saved-result__data_span\">\n                  {\n                    // проверка на ИП, т.к. у них в объекте нет 'management' свойства\n                    org.data.type !== 'INDIVIDUAL'\n                      ? org.data.management.post!.charAt(0)\n                      + org.data.management.post!.slice(1).toLowerCase()\n                      : org.data.opf.full\n                  }\n                </span>\n                { org.data.type !== 'INDIVIDUAL'\n                  ? org.data.management.name\n                  : org.data.name.full\n                }\n              </p>\n            </>\n          )\n        }\n      </div>\n      <button type=\"button\"\n              className=\"saved-result__delete-btn\"\n              onClick={handleDeleteResult}/>\n      {!areDetailsOpen\n        ? (<button type=\"button\"\n                   className=\"saved-result__details-btn\"\n                   onClick={handleOpenDetails}>\n            подробнее<img src={arrowDown}\n                          alt=\"подробнее\"\n                          className=\"saved-result__details-icon\"/>\n          </button>)\n        : (<button type=\"button\"\n                   className=\"saved-result__details-btn\"\n                   onClick={handleOpenDetails}>\n            скрыть подробности<img src={arrowUp}\n                                   alt=\"скрыть подробности\"\n                                   className=\"saved-result__details-icon\"/>\n          </button>)\n      }\n    </div>\n  )\n}\n","import React from 'react';\nimport { SavedResult } from \"../components/SavedResult/SavedResult\";\nimport { IOrg } from \"../interfaces\";\n\ninterface SavedOrgsPageProps {\n  setSavedResults(newSavedResults: IOrg[]): void\n  savedResults: IOrg[]\n}\n\nexport const SavedOrgsPage: React.FC<SavedOrgsPageProps> =\n  ({ savedResults, setSavedResults }) => {\n  return (\n    <div className=\"orgs\">\n      {\n        savedResults.map((org, i) => (\n          <SavedResult org={org}\n                       key={i}\n                       setSavedResults={setSavedResults}\n                       savedResults={savedResults}\n          />\n        ))\n      }\n    </div>\n  )\n}\n","import React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\n\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport { NavBar } from \"./components/NavBar/NavBar\";\nimport { NewOrgPage } from \"./pages/NewOrgPage\";\nimport { SavedOrgsPage } from \"./pages/SavedOrgsPage\";\nimport { IOrg } from \"./interfaces\";\n\nconst App: React.FC = () => {\n  const [result, setResult] = React.useState<IOrg | {}>({});\n  const [suggestions, setSuggestions] = React.useState<IOrg[]>([]);\n  const [isInputFocused, setIsInputFocused] = React.useState<boolean>(false);\n  const [savedResults, setSavedResults] = React.useState<IOrg[]>([]);\n  const [suggestionIndex, setSuggestionIndex] = React.useState<number>(-1);\n\n  // проверка для фокусировки/блюра инпута и тем самым\n  // показа/скрытия \"подсказок\"\n  React.useEffect(() => {\n    const evtLstn = (evt: MouseEvent): void => {\n      if ((evt.target as HTMLElement).classList.contains('orgs__search')\n        || (evt.target as HTMLElement).classList.contains('suggestion')\n        || ((evt.target as HTMLElement).parentElement as HTMLElement).classList.contains('suggestion'))\n      {\n        setIsInputFocused(true);\n      } else {\n        setIsInputFocused(false);\n        setSuggestionIndex(-1);\n      }\n    }\n    (document.getElementById('app') as HTMLElement).addEventListener('click', evtLstn);\n    return () => (document.getElementById('app') as HTMLElement).removeEventListener('click', evtLstn);\n  }, [isInputFocused])\n\n  // проверка на сохраненные организации с прошлых сессий\n  React.useEffect(() => {\n    localStorage.getItem('saved') && setSavedResults(JSON.parse(localStorage.getItem('saved') || '[]'));\n  }, [])\n\n  // запрос к серверу для получения массива Подсказок\n  const fetchSuggestions = (query: string) => {\n    const url = \"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/party\";\n    const token = \"2a20a4f21d4938545a386b96e095f8a2c7eb272a\";\n\n    const options: RequestInit = {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Token \" + token\n      },\n      body: JSON.stringify({ query: query })\n    }\n\n    fetch(url, options)\n      .then(res => {\n        if (res.ok) {\n          return res.json()\n        } else {\n          return Promise.reject(`Ошибка: ${res.status} ${res.statusText}`);\n        }\n      })\n      .then(res => {\n        let newSuggestions: IOrg[] = [];\n        res.suggestions.map((org: any) => {\n          let newSuggestion: IOrg = {\n            value: org.value,\n            data: {\n              inn: org.data.inn,\n              kpp: org.data.kpp,\n              ogrn: org.data.ogrn,\n              address: {\n                data: {\n                  region_with_type: org.data.address.data.region_with_type\n                },\n                unrestricted_value: org.data.address.unrestricted_value\n              },\n              type: org.data.type,\n              opf: {\n                full: org.data.opf.full\n              },\n              name: {\n                full: org.data.name.full\n              },\n              management: {}\n            }\n          };\n          if (org.data.management) {\n            newSuggestion.data.management.post = org.data.management.post;\n            newSuggestion.data.management.name = org.data.management.name;\n          }\n          newSuggestions.push(newSuggestion);\n          return;\n        })\n        setSuggestions(newSuggestions);\n      })\n      .catch(error => console.log(error));\n  }\n\n  return (\n    <div className=\"app\" id=\"app\">\n      <Header/>\n\n      <main className=\"main\">\n        <h1 className=\"main__title\">Мои организации</h1>\n\n        <section className=\"main__container\">\n          <NavBar savedResults={savedResults}\n                  setResult={setResult}\n                  setSuggestions={setSuggestions}\n          />\n\n          <Switch>\n            <Route exact path=\"/\">\n              <NewOrgPage fetchSuggestions={fetchSuggestions}\n                          suggestions={suggestions}\n                          setResult={setResult}\n                          setIsInputFocused={setIsInputFocused}\n                          isInputFocused={isInputFocused}\n                          result={result}\n                          setSavedResults={setSavedResults}\n                          savedResults={savedResults}\n                          suggestionIndex={suggestionIndex}\n                          setSuggestionIndex={setSuggestionIndex}\n              />\n            </Route>\n\n            <Route path=\"/saved\">\n              <SavedOrgsPage savedResults={savedResults}\n                             setSavedResults={setSavedResults}\n              />\n            </Route>\n          </Switch>\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}